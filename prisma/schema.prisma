generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(cuid())
  email    String @unique
  password String
  name     String
  role     Role

  resumes       Resume[]
  conversations Conversation[]
  CoverLetter   CoverLetter[]
}

model Resume {
  id             String  @id @default(cuid())
  userId         String
  summary        String  @default("")
  contactId      String  @unique
  conversationId String?

  experiences   Experience[]
  educations    Education[]
  skills        Skill[]
  awards        Award[]
  certifications Certification[]
  projects      Project[]

  contact      Contact       @relation(fields: [contactId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation?

  @@unique([userId, conversationId])
}

model Contact {
  id          String        @id @default(cuid())
  fullName    String        @default("")
  email       String        @default("")
  phone       String        @default("")
  address     String?       @default("")
  city        String?       @default("")
  country     String?       @default("")
  linkedin    String?       @default("")
  github      String?       @default("")
  portfolio   String?       @default("")
  Resume      Resume?
  CoverLetter CoverLetter[]
}

model Experience {
  id             String         @id @default(cuid())
  title          String
  employmentType EmploymentType
  company        String
  location       String
  locationType   LocationType
  startDate      DateTime
  endDate        DateTime?
  description    String?

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Education {
  id           String    @id @default(cuid())
  school       String
  degree       String
  fieldOfStudy String
  startDate    DateTime
  endDate      DateTime?
  gpa          Float?
  gpaMax       Float?
  location     String?
  description  String?
  resumeId     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Skill {
  id          String           @id @default(cuid())
  name        String
  proficiency SkillProficiency
  category    SkillCategory    @default(TECHNICAL)

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Project {
  id          String    @id @default(cuid())
  title       String
  startDate   DateTime
  endDate     DateTime?
  description String? // For Rich Text Editor HTML

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Certification {
  id           String    @id @default(cuid())
  name         String
  issuer       String
  issueDate    DateTime
  expiryDate   DateTime?
  credentialId String?

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Award {
  id          String   @id @default(cuid())
  title       String
  issuer      String
  date        DateTime?
  description String   @default("")

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Conversation {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      Status    @default(PENDING)
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  messages    Message[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  resume      Resume?   @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  resumeId String? @unique
}

enum MessagePartContentType {
  TEXT
  ACTION
  POST
  GET
}

enum MessageContentType {
  TEXT_AND_ACTION
  TEXT
}

enum Status {
  ACTIVE
  PENDING
  INTERVIEW
  REJECTED
  ACCEPTED
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
  SELF_EMPLOYED // Added based on common usage
}

enum LocationType {
  ON_SITE
  REMOTE
  HYBRID
}

enum SkillProficiency {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum Role {
  JOBSEEKER
  RECRUITER
}

model MessagePart {
  // ... existing fields
  id          String                 @id @default(cuid())
  content     String
  contentType MessagePartContentType
  actionUrl   String?
  messageId   String?
  message     Message?               @relation(fields: [messageId], references: [id])
}

model Message {
  id             String              @id @default(cuid())
  conversationId String
  role           String
  content        String
  contentType    MessageContentType?
  parts          MessagePart[]
  createdAt      DateTime            @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model CoverLetter {
  id        String   @id @default(cuid())
  userId    String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contactId String
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum SkillCategory {
  TECHNICAL
  SOFT
  LANGUAGE
}
