"use client";

import { ChevronDown, GripHorizontal, Trash2, Info } from "lucide-react";
import { Button } from "~/components/ui/button";
import { forwardRef, useState, type ReactNode } from "react";
import { cn } from "~/lib/utils";

interface DragHandleProps extends React.HTMLAttributes<HTMLButtonElement> {
  'aria-label'?: string;
  'aria-describedby'?: string;
  children?: ReactNode;
}

export const DragHandle = forwardRef<HTMLButtonElement, DragHandleProps>(
  ({ children, ...props }, ref) => (
    <button
      ref={ref}
      type="button"
      className="cursor-grab active:cursor-grabbing focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 rounded-md p-1.5 hover:bg-muted/50"
      {...props}
    >
      {children || <GripHorizontal className="h-4 w-4 text-muted-foreground" />}
    </button>
  )
);

DragHandle.displayName = 'DragHandle';

interface DetailCardProps {
  id: string;
  index: number;
  title: string;
  onDelete: (id: string) => void;
  children: ReactNode;
  defaultOpen?: boolean;
  dragHandleProps?: React.HTMLAttributes<HTMLButtonElement>;
}

export const DetailCard = forwardRef<HTMLDivElement, DetailCardProps>(({
  id,
  index,
  title,
  onDelete,
  children,
  defaultOpen = true,
  dragHandleProps,
}, ref) => {
  const [isOpen, setIsOpen] = useState(defaultOpen);
  console.log('Rendering DetailCard with id:', id, 'title:', title, 'isOpen:', isOpen);

  return (
    <div 
      ref={ref}
      className="rounded-xl border bg-background shadow-sm dark:border-border/30 dark:bg-background/80 transition-all duration-200 hover:shadow-md"
      data-draggable-id={id}
    >
      <button
        className="w-full flex justify-between items-center p-3 sm:p-4 rounded-t-xl rounded-b-none bg-muted hover:bg-secondary border-b border-dashed border-muted cursor-pointer select-none"
        onClick={(e) => {
          e.preventDefault();
          e.stopPropagation();
          setIsOpen(prev => !prev);
        }}
        tabIndex={0}
        aria-expanded={isOpen}
      >
        <div className="flex items-center gap-2 sm:gap-3 overflow-hidden">
          <DragHandle {...dragHandleProps} aria-label={`Drag ${title || 'item'} to reorder`} />
          <div className="flex flex-col min-w-0">
            <div className="flex items-center gap-1.5 sm:gap-2">
              <span className="font-mono text-xs px-1.5 py-0.5 rounded bg-primary/10 text-primary flex-shrink-0">
                #{index + 1}
              </span>
              <span className="text-muted-foreground italic text-sm truncate">
                {title || "Untitled"}
              </span>
            </div>
          </div>
        </div>
        <div className="flex items-center gap-1 sm:gap-2 ml-2">
          <Button
            type="button"
            variant="ghost"
            size="icon"
            className="h-7 w-7 sm:h-8 sm:w-8 rounded-full text-destructive hover:bg-destructive/10 hover:text-destructive"
            onClick={(e) => {
              e.preventDefault();
              e.stopPropagation();
              onDelete(id);
            }}
          >
            <Trash2 className="size-3.5 sm:size-4" />
          </Button>
          <div
            className={cn(
              "text-muted-foreground transition-transform duration-200",
              isOpen ? "rotate-180" : ""
            )}
          >
            <ChevronDown className="h-5 w-5" />
          </div>
        </div>
      </button>
      {isOpen && (
        <div className="p-4 sm:p-5 space-y-4">
          {children}
        </div>
      )}
    </div>
  );
});

DetailCard.displayName = 'DetailCard';

interface DetailCardFieldProps {
  label: string;
  icon: ReactNode;
  children: ReactNode;
  className?: string;
  helpText?: string;
}

export function DetailCardField({
  label,
  icon,
  children,
  className = "",
  helpText,
}: DetailCardFieldProps) {
  return (
    <div className={cn("space-y-2", className)}>
      <div className="flex items-center justify-between">
        <div className="font-medium peer-disabled:cursor-not-allowed peer-disabled:opacity-70 flex items-center gap-2 text-muted-foreground text-sm">
          {icon}
          <span>{label}</span>
        </div>
        {helpText && (
          <div className="cursor-help" data-state="closed" title={helpText}>
            <Info className="h-3.5 w-3.5 text-muted-foreground" />
          </div>
        )}
      </div>
      {children}
    </div>
  );
}
